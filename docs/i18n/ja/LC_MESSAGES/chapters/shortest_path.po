# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010-2013 Hal Seki, Yves Jacolin, Daniel Kastl, Frédéric Junod
# This file is distributed under the same license as the Workshop - FOSS4G routing with pgRouting package.
# 
# Translators:
# sanak <nagase@georepublic.co.jp>, 2013
# smellman <taro@georepublic.co.jp>, 2013
msgid ""
msgstr ""
"Project-Id-Version: Workshop\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-29 23:39\n"
"PO-Revision-Date: 2013-10-30 07:56+0000\n"
"Last-Translator: sanak <nagase@georepublic.co.jp>\n"
"Language-Team: Japanese (http://www.transifex.com/projects/p/pgrouting-workshop/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

# 04b7616e06d945f4989e67ae4073d537
#: ../../chapters/shortest_path.rst:13
msgid "pgRouting Algorithms"
msgstr "pgRouting のアルゴリズム"

# 09ba6d34591f445c968e89a4f27242b6
#: ../../chapters/shortest_path.rst:15
msgid ""
"pgRouting was first called *pgDijkstra*, because it implemented only "
"shortest path search with *Dijkstra* algorithm. Later other functions were "
"added and the library was renamed."
msgstr "pgRouting は初めは *pgDijkstra* と呼ばれており、これは *ダイクストラ* 法による最短経路探索のみ実装していたからです。のちに他の機能が追加され、ライブラリの名前が変更されました。"

# 7bca811142774c3ca4d9c045580b5b54
#: ../../chapters/shortest_path.rst:21
msgid ""
"This chapter will explain selected pgRouting algorithms and which attributes"
" are required."
msgstr "このチャプターでは厳選された pgRouting のアルゴリズムやそれらがどの属性を必要とするかを説明します。"

# 2436b71b38a0475885e25ba652889b96
#: ../../chapters/shortest_path.rst:26
msgid ""
"If you run :doc:`osm2pgrouting <osm2pgrouting>` tool to import "
"*OpenStreetMap* data, the ``ways`` table contains all attributes already to "
"run all shortest path functions. The ``ways`` table of the ``pgrouting-"
"workshop`` database of the :doc:`previous chapter <topology>` is missing "
"several attributes instead, which are listed as **Prerequisites** in this "
"chapter."
msgstr "もし :doc:`osm2pgrouting <osm2pgrouting>` ツールを *OpenStreetMap* のデータをインポートするのに実行していたら、 ``ways`` テーブルにすでに全ての最短経路の機能を実行するためのすべての属性が含まれています。 :doc:`前のチャプター <topology>` の ``pgrouting-workshop`` データベースの ``ways`` テーブルはいくつかの属性が無い代わりに、このチャプターの **前提条件** として紹介します。"

# 9690da0236c04b9ca6b2049d3ba3061f
#: ../../chapters/shortest_path.rst:32
msgid "Shortest Path Dijkstra"
msgstr "ダイクストラ法による最短経路探索"

# f10d997ecbbd4432893c65c30eb46a9b
#: ../../chapters/shortest_path.rst:34
msgid ""
"Dijkstra algorithm was the first algorithm implemented in pgRouting. It "
"doesn't require other attributes than ``source`` and ``target`` ID, ``id`` "
"attribute and ``cost``. It can distinguish between `directed "
"<http://en.wikipedia.org/wiki/Directed_graph>`_ and undirected graphs. You "
"can specify if your network has ``reverse cost`` or not."
msgstr "ダイクストラ法は pgRouting で最初に実装されたアルゴリズムです。このアルゴリズムは ``source`` ID と ``target`` ID と ``id`` と ``cost`` 以外の属性は必要としません。このアルゴリズムは `有向グラフ  <http://en.wikipedia.org/wiki/Directed_graph>`_ と無向グラフを識別することができます。あなたはあなたのネットワークに ``reverse cost`` があるかどうかを指定することが可能です。"

# 0141db9d02ba46c78223a502264fc779
# 32e5c305e88e425fbbd7b4df905835cb
# 6842f9d45d984dc1972ed29e6681bcfb
#: ../../chapters/shortest_path.rst:37 ../../chapters/shortest_path.rst:131
#: ../../chapters/shortest_path.rst:242
msgid "Prerequisites"
msgstr "前提条件"

# a64c31b1a4ca4816bf44d1f6df9bb49e
#: ../../chapters/shortest_path.rst:38
msgid ""
"To be able to use ``reverse cost`` you need to add an additional cost "
"column. We can set reverse cost as length."
msgstr "``reverse cost`` を使えるようにするには追加の cost カラムを追加する必要があります。私達は reverse cost を length としてセットすることができます。"

# 77e4e32ce73344a69532820c99e69bbd
# 60fe574fe255467eb3bccf3e125be1f2
# 06e9868c095841a29665694c6aaaa9fb
#: ../../chapters/shortest_path.rst:46 ../../chapters/shortest_path.rst:157
#: ../../chapters/shortest_path.rst:247
msgid "Description"
msgstr "説明"

# 6e05a29138144b27a8fb79db75fc02b3
# 92d40d836a3b4903bcd607fc64058ca5
#: ../../chapters/shortest_path.rst:47 ../../chapters/shortest_path.rst:160
msgid ""
"Returns a set of ``pgr_costResult`` (seq, id1, id2, cost) rows, that make up"
" a path."
msgstr "``pgr_costResult`` (seq, id1, id2, cost) の行セットを返し、これでパスを作り出せます。"

# 5e12dddf41504573a438430466a2938e
# d0f6e365d248437fa3e4bc9d067fe73b
# 181bca74ec1e44f59b48acbf17e642cd
#: ../../chapters/shortest_path.rst:55 ../../chapters/shortest_path.rst:168
#: ../../chapters/shortest_path.rst:263
msgid "Parameters"
msgstr "パラメータ"

# 920a8987619145b998c2a7ed8810e0a3
# a0dd301a38e44509bf4995db55000045
# 2177df0135f54005bf88e8610ec95ff0
#: ../../chapters/shortest_path.rst:56 ../../chapters/shortest_path.rst:169
#: ../../chapters/shortest_path.rst:264
msgid ""
"a SQL query, which should return a set of rows with the following columns:"
msgstr "SQLのクエリーです。以下に続くカラムからなる行セットを返します:"

# 75c76271e6aa408a9000c29f5e2d95bc
# c449de92010c4bcfb206ab19496be2c2
# f07bd0af5e98435a92dbf0c98d02b9cb
#: ../../chapters/shortest_path.rst:63 ../../chapters/shortest_path.rst:176
#: ../../chapters/shortest_path.rst:271
msgid "``int4`` identifier of the edge"
msgstr "エッジの識別子[ ``int4`` ]"

# ff9703a695dd4d5794f425f816ced012
# e03d8d8e6d02422c9222f6633c30fea8
# 266a89db527b44069282fad4547293c9
#: ../../chapters/shortest_path.rst:64 ../../chapters/shortest_path.rst:177
#: ../../chapters/shortest_path.rst:272
msgid "``int4`` identifier of the source vertex"
msgstr "``int4`` 型の始点ノードの識別子"

# 08a700fd020148f19573b0d43a97a247
# 012f5d70513d43fbae167c0cceedddbb
# 73ceadb9f9d94704aa4acb1d51bd69e0
#: ../../chapters/shortest_path.rst:65 ../../chapters/shortest_path.rst:178
#: ../../chapters/shortest_path.rst:273
msgid "``int4`` identifier of the target vertex"
msgstr "``int4`` 型の終点ノードの識別子"

# c9010fcda4d54137808bbad42ff7c425
# 65bd421067ff4f8686bec3e70d14390c
# bb3956a911d848c391a1a746ae9be0d5
#: ../../chapters/shortest_path.rst:66 ../../chapters/shortest_path.rst:179
#: ../../chapters/shortest_path.rst:274
msgid ""
"``float8`` value, of the edge traversal cost. A negative cost will prevent "
"the edge from being inserted in the graph."
msgstr "``float8`` 型のエッジにかかる重み。負の重みはエッジがグラフに挿入されることを防ぎます。"

# 18ba967a50db4292bfdc8d66c7c8bebd
# 4b94523f15da4a8aba8e3e785e13659d
# a53ce1837c064cc6b429bdf08c2b70b6
#: ../../chapters/shortest_path.rst:67 ../../chapters/shortest_path.rst:184
#: ../../chapters/shortest_path.rst:275
msgid ""
"(optional) the cost for the reverse traversal of the edge. This is only used"
" when the ``directed`` and ``has_rcost`` parameters are ``true`` (see the "
"above remark about negative costs)."
msgstr "(オプション) エッジの反対方向のコスト。この値は ``directed`` および``has_rcost`` パラメータが ``true`` の場合のみ使用されます。(負のコストについては前述の通りです)"

# 875961eb81824ac29252da0cb023ef8d
# aa4e2267c3174bd8b86a0026e8c0c256
# 4956d6cbc4804072afac607c5dcdcb3a
#: ../../chapters/shortest_path.rst:69 ../../chapters/shortest_path.rst:186
#: ../../chapters/shortest_path.rst:277
msgid "``int4`` id of the start point"
msgstr "``int4`` 始点ノードのID"

# 68b069e285cd43378a1568a2a264defd
# bf99f82bae3f488caefbb7fd39650d6b
#: ../../chapters/shortest_path.rst:70 ../../chapters/shortest_path.rst:187
msgid "``int4`` id of the end point"
msgstr "``int4`` 終点ノードのID"

# 65ce736790be4fe384134e0de25f8bcb
# 0bf4e8a3ffbd450485c5203c090f0a9e
# c32cd7559be249f1aedb868f8bfbe688
#: ../../chapters/shortest_path.rst:71 ../../chapters/shortest_path.rst:188
#: ../../chapters/shortest_path.rst:279
msgid "``true`` if the graph is directed"
msgstr "有向グラフの場合は ``true`` を指定"

# 04e321efd05549eca14e34a104948e91
# 2840a928dd984bc2b3094d0c95f12b4d
# cfe52ac0b61d4fecba526f4a392d4fb6
#: ../../chapters/shortest_path.rst:72 ../../chapters/shortest_path.rst:189
#: ../../chapters/shortest_path.rst:280
msgid ""
"if ``true``, the ``reverse_cost`` column of the SQL generated set of rows "
"will be used for the cost of the traversal of the edge in the opposite "
"direction."
msgstr "``true`` の場合、SQLで生成される行セットの ``reverse_cost`` カラムは、エッジの逆方向にかかる重みとして使用されます。"

# 74bf01fd523e43d8a4d8030bf797abb1
# 4be7ca4ba17341749b11d5270f6557bd
#: ../../chapters/shortest_path.rst:74 ../../chapters/shortest_path.rst:191
msgid "Returns set of ``pgr_costResult``:"
msgstr "``pgr_costResult`` のセットを返します:"

# 9f3070022e9b46c58a8706029502d0fe
# 69f3e9b71dbd4455aeb8346c662e5e75
# f12c012bd97242648eb2f6d4d3335e56
# c96f11cf277b40feab7c221f09816be3
#: ../../chapters/shortest_path.rst:76 ../../chapters/shortest_path.rst:193
#: ../../chapters/shortest_path.rst:285 ../../chapters/shortest_path.rst:293
msgid "row sequence"
msgstr "行の連番"

# 5b13146980f842008ab939e6fb35dfcf
# 67e7b430eddf4c699945f98f4ec731f3
#: ../../chapters/shortest_path.rst:77 ../../chapters/shortest_path.rst:194
msgid "node ID"
msgstr "ノードID"

# eb52de4eaed84e4e8a759ef9a7a77fe3
# ef84a80821664338ac963e0add586850
#: ../../chapters/shortest_path.rst:78 ../../chapters/shortest_path.rst:195
msgid "edge ID (``-1`` for the last row)"
msgstr "エッジID (最終行は ``-1``)"

# 5fa4473e1a564384bb89ad8965e0ba3a
# 1632bd82ac974647bf3c204da8eceb00
#: ../../chapters/shortest_path.rst:79 ../../chapters/shortest_path.rst:196
msgid "cost to traverse from ``id1`` using ``id2``"
msgstr "``id1`` から ``id2`` を横断するコスト"

# 5d5edcc21d9c436d81e6bd1be70bea9f
#: ../../chapters/shortest_path.rst:84
msgid ""
"Many pgRouting functions have ``sql::text`` as one of their arguments. While"
" this may look confusing at first, it makes the functions very flexible as "
"the user can pass any ``SELECT`` statement as function argument as long as "
"the returned result contains the required number of attributes and the "
"correct attribute names."
msgstr "多くの pgRouting の関数は ``sql::text`` を１つ目の引数として持っています。最初は戸惑うかもしれないですが、このことは、返される結果が要求された数の属性と正確な属性名を含む限り、ユーザがどんな ``SELECT`` 文でも関数の引数として渡すことができるため、関数をとてもフレキシブルにしています。"

# 63dd780d1267488ba340c8529052d00e
#: ../../chapters/shortest_path.rst:85
msgid "Dijkstra algorithm does not require the network geometry."
msgstr "ダイクストラ法はネットワークジオメトリを必要としません。"

# f803c58d8d294e3ba1213d134a5e34fc
#: ../../chapters/shortest_path.rst:86
msgid ""
"The function does not return a geometry, but only an ordered list of nodes."
msgstr "この関数はジオメトリを返しません、返すのはノードの順序付きリストだけです。"

# 52996775dad04496bfd12f101cbc4235
# 156fc0c716a44322b8d908c123c7f039
#: ../../chapters/shortest_path.rst:89 ../../chapters/shortest_path.rst:200
msgid "Example query"
msgstr "クエリの例"

# e1e76145ec164512b61aa108f6052d22
#: ../../chapters/shortest_path.rst:90
msgid ""
"``pgr_costResult`` is a common result type used by several pgRouting "
"functions. In the case of ``pgr_dijkstra`` the first column is a sequential "
"ID, followed by node ID, edge ID and cost to pass this edge."
msgstr "``pgr_costResult`` はいくつかの pgRouting の関数で使われている共通の返り型です。 ``pgr_dijkstra`` の場合最初のカラムはシーケンシャル ID で、そのあとノード ID、エッジID、このエッジを通過するコストという続きます。"

# cebdb00fdb064debaf699af8580f7a37
# 4b07fd71123a4d58b5f528379859d8b9
# e62991f4ad804b0f828afc053ba9e110
# eb817ea62184469f98830d4066a2c381
#: ../../chapters/shortest_path.rst:104 ../../chapters/shortest_path.rst:214
#: ../../chapters/shortest_path.rst:313 ../../chapters/shortest_path.rst:338
msgid "Query result"
msgstr "クエリの結果"

# 7e9691b6f17442768c7766b8d7058265
#: ../../chapters/shortest_path.rst:120
msgid ""
"With more complex SQL statements, using JOINs for example, the result may be"
" in a wrong order. In that case ``ORDER BY seq`` will ensure that the path "
"is in the right order again."
msgstr "もっと複雑な SQL 文、例えば JOIN を使った場合は結果が間違った順番になるでしょう。この場合は ``ORDER BY seq`` がパスが再度正しい順番になるのを保証するでしょう。"

# dd25831f698f4bb5a01f63602601d10a
#: ../../chapters/shortest_path.rst:121
msgid ""
"The returned cost attribute represents the cost specified in the "
"``sql::text`` argument. In this example cost is ``length`` in unit "
"\"kilometers\". Cost may be time, distance or any combination of both or any"
" other attributes or a custom formula."
msgstr "返り値の cost 属性は ``sql::text`` 引数で指定されたコストを表しています。この例の cost は \"キロメートル\" 単位の ``length`` です。コストは時間や距離、それらの組み合わせ、または他の属性や独自の計算式になります。"

# 6b5f98b2ad0a4dabb642c3886505cf9d
#: ../../chapters/shortest_path.rst:126
msgid "Shortest Path A*"
msgstr "A* アルゴリズムによる最短経路探索"

# 03639c22859e481dbee43c7d5f46e232
#: ../../chapters/shortest_path.rst:128
msgid ""
"A-Star algorithm is another well-known routing algorithm. It adds "
"geographical information to source and target of each network link. This "
"enables the routing query to prefer links which are closer to the target of "
"the shortest path search."
msgstr "A-Star 探索アルゴリズムはもう一つのよく知られたルーティングアルゴリズムです。これはそれぞれのネットワークリンクの source と target に地理的な情報を追加します。このアルゴリズムは、ルーティングのクエリーが最短経路探索の終点に近いリンクを好むようにします。"

# b4d4d7ab305d40a39781aa0a1bf9f8ea
#: ../../chapters/shortest_path.rst:132
msgid ""
"For A-Star you need to prepare your network table and add latitute/longitude"
" columns (``x1``, ``y1`` and ``x2``, ``y2``) and calculate their values."
msgstr "A-Star はあなたのネットワークのテーブルに事前に latitude/longitude カラム (``x1``, ``y1`` と ``x2``, ``y2``) を追加してそれらの値を計算しておく必要があります。"

# 857a396abdb84e12bea14785aac5d541
#: ../../chapters/shortest_path.rst:149
msgid ""
"A bug in a previous version of PostGIS didn't allow the use of "
"``ST_startpoint`` or ``ST_endpoint``."
msgstr "以前のバージョンの PostgreSQL はバグのため ``ST_startpoint`` と ``ST_endpoint`` を使うことができません。"

# 45a42c358f734402806e8db72b0d87af
#: ../../chapters/shortest_path.rst:150
msgid ""
"From PostGIS 2.x ``ST_startpoint`` and ``ST_endpoint`` are only valid for "
"``LINESTRING`` geometry type and will fail with ``MULTILINESTING``."
msgstr "PostGIS 2.x から ``ST_startpoint`` と ``ST_endpoint`` は ``LINESTRING`` のジオメトリ型のみ有効で、 ``MULTILINESTING`` では失敗するでしょう。"

# 56f7fcdb32b84c10a01c961ba5b03e6a
#: ../../chapters/shortest_path.rst:152
msgid ""
"Therefor a slightly more difficult looking query is used. If the network "
"data really contains multi-geomtery linestrings the query might give the "
"wrong start and end point. But in general data has been imported as "
"``MULTILINESTING`` even if it only contains ``LINESTRING`` geometries."
msgstr "そのためちょっとばかり変わったクエリーが使われます。もしネットワークデータがマルチジオメトリのラインストリングを実際に含んでいたらクエリーは間違った start と end のポイントを与えてしまうでしょう。しかし、たとえ ``LINESTRING`` のジオメトリのみしか含まれていなかったとしていても、一般的にはデータは ``MULTILINESTING`` としてインポートされます。"

# dc6e9cc43375429da397f91505c8068c
#: ../../chapters/shortest_path.rst:158
msgid ""
"Shortest Path A-Star function is very similar to the Dijkstra function, "
"though it prefers links that are close to the target of the search. The "
"heuristics of this search are predefined, so you need to recompile pgRouting"
" if you want to make changes to the heuristic function itself."
msgstr "A-Star 最短経路関数は Dijkstra 関数ととても似ていて、しかしながらこの関数は検索の対象が近いリンクを好みます。この検索のヒューリスティックは事前に定義され、もしヒューリスティック関数自身に変更を加えたい場合は pgRouting を再コンパイルする必要があります。"

# 9ee656be7d52464581c1f5881c0b3059
#: ../../chapters/shortest_path.rst:180
msgid "``x`` coordinate of the start point of the edge"
msgstr "エッジの始点の ``x`` 座標"

# 4df3011e827443038ae0b4b281de5576
#: ../../chapters/shortest_path.rst:181
msgid "``y`` coordinate of the start point of the edge"
msgstr "エッジの始点の ``y`` 座標"

# 43d5ad35f2af4cd2a228f3ec2915b15e
#: ../../chapters/shortest_path.rst:182
msgid "``x`` coordinate of the end point of the edge"
msgstr "エッジの終点の ``x`` 座標"

# bd7c4c170e8a4a8db5dfe69f6cc1b8ba
#: ../../chapters/shortest_path.rst:183
msgid "``y`` coordinate of the end point of the edge"
msgstr "エッジの終点の ``y`` 座標"

# ab96b65ce58c492aa33b3d1d66fa0aa3
#: ../../chapters/shortest_path.rst:230
msgid ""
"The result of Dijkstra and A-Star are the same, which should be the case."
msgstr "上記の Dijkstra と A-Star の結果は同じになります。結果に相違が出るかは場合によります。"

# 3368357b91e9431eaf4ff535ba1de8f3
#: ../../chapters/shortest_path.rst:231
msgid ""
"A-Star is supposed to be faster than Dijkstra algorithm as the network size "
"is getting larger. But in case of pgRouting the algorithm speed advantage "
"does not matter really compared the time required to select the network data"
" and build the graph."
msgstr "A-Star はネットワークのサイズが大きくなるほどダイクストラ法よりも早くなると想定されます。しかし pgRouting の場合、アルゴリズムのスピードの優位性は、ネットワークデータを選択し、グラフを構築するのに要求される時間に比べると、有意な差としては表れません。"

# 6235f7fbf97a4d2d8286c8c3ba74ade9
#: ../../chapters/shortest_path.rst:237
msgid "Multiple Shortest Paths with kDijkstra"
msgstr "kDijkstra による複数の最短経路探索"

# 149136252d8c485d9ba20106c63b6161
#: ../../chapters/shortest_path.rst:239
msgid ""
"The kDijkstra functions are very similar to the Dijkstra function but they "
"allow to set multiple destinations with a single function call."
msgstr "kDijkstra 関数は Dijkstra 関数ととても似ていますが一回の関数呼び出しで複数の目的地を設定することができます。"

# a82983a448e0439b9a6a32222d97cedf
#: ../../chapters/shortest_path.rst:243
msgid "kDijkstra doesn't require additional attributes to Dijkstra algorithm."
msgstr "kDijkstra はダイクストラ法から追加の属性は必要ありません。"

# a190b399c9be4860801b2c8acc25e41a
#: ../../chapters/shortest_path.rst:248
msgid ""
"If the main goal is to calculate the total cost, for example to calculate "
"multiple routes for a distance matrix, then ``pgr_kdijkstraCost`` returns a "
"more compact result. In case the paths are important ``pgr_kdijkstraPath`` "
"function returns a result similar to A* or Dijkstra for each destination."
msgstr "例えば距離の行列から複数のルートを計算する場合など、全てのコストを計算するのが主な目的であれば、 ``pgr_kdijkstraCost`` はよりコンパクトな結果を返します。パスが重要な場合 ``pgr_kdijkstraPath`` 関数はそれぞれの行き先における A* または Dijkstra と似た結果を返します。"

# 377da8ba4d664e788d7b97aecbb2114f
#: ../../chapters/shortest_path.rst:251
msgid ""
"Both functions return a set of ``pgr_costResult`` (seq, id1, id2, cost) "
"rows, that summarize the path cost or return the paths."
msgstr "どちらの関数も ``pgr_costResult`` (seq, id1, id2, cost) の行セットを返し、パスのコストを集約したものか、パスを返します。"

# 680d8eb03cc7456ab5c0472f110720b3
#: ../../chapters/shortest_path.rst:278
msgid "``int4[]`` an array of ids of the end points"
msgstr "``int4[]`` 終点ノードのIDの配列"

# b032aa70e0a047b4a34881443ffa1029
#: ../../chapters/shortest_path.rst:283
msgid "``pgr_kdijkstraCost`` returns set of ``pgr_costResult``:"
msgstr "``pgr_kdijkstraCost`` は ``pgr_costResult`` の集合を返します:"

# 2230e3004017492c916efb065b7c4e9c
#: ../../chapters/shortest_path.rst:286
msgid ""
"path vertex source id (this will always be source start point in the query)."
msgstr "始点ノードのIDのパス識別子 (これは常にクエリーの始点ポイントとなるでしょう)。"

# c3f8303fe2b2480f8fa589349d7e4ed8
#: ../../chapters/shortest_path.rst:287
msgid "path vertex target id"
msgstr "終点ノードのIDのパス識別子"

# 48e79e2176924fd0b85e07d1685ac865
#: ../../chapters/shortest_path.rst:288
msgid ""
"cost to traverse the path from ``id1`` to ``id2``. Cost will be -1.0 if "
"there is no path to that target vertex id."
msgstr "``id1`` から ``id2`` へ横断するコスト。もし終点識別子IDへのパスが無ければコストは -1.0 になるでしょう。"

# 03671d1f80fe4ce18ce09b60a4d6b0b9
#: ../../chapters/shortest_path.rst:291
msgid "``pgr_kdijkstraPath`` returns set of ``pgr_costResult``:"
msgstr "``pgr_kdijkstraPath`` は ``pgr_costResult`` のセットを返します。"

# b2f1ebe13b1e4410bfc0ce1e059b464c
#: ../../chapters/shortest_path.rst:294
msgid "path vertex target id (identifies the target path)."
msgstr "終点ノードのIDのパス識別子 (終点のパスを特定します)。"

# 92cdfbbc961040639d13c625e3b4ad98
#: ../../chapters/shortest_path.rst:295
msgid "path edge id"
msgstr "エッジIDのパス"

# 6ff33358813f40999458fefca3a13f62
#: ../../chapters/shortest_path.rst:296
msgid "cost to traverse this edge or -1.0 if there is no path to this target"
msgstr "このエッジを横断するコストもしくはこの終点へのパスがなければ -1.0"

# cadad606cd804e149a33a4c58a3dc79e
#: ../../chapters/shortest_path.rst:300
msgid "Example query ``pgr_kdijkstraCost``"
msgstr "``pgr_kdijkstraCost`` のクエリの例"

# 7a8f797b4bba4566a137e99d258b1bda
#: ../../chapters/shortest_path.rst:325
msgid "Example query ``pgr_kdijkstraPath``"
msgstr "``pgr_kdijkstraPath`` のクエリの例"

# 4dc7eda827db4cec9b39eeed4d563006
#: ../../chapters/shortest_path.rst:355
msgid ""
"There are many other functions available with the new pgRouting 2.0 release,"
" but most of them work in a similar way, and it would take too much time to "
"mention them all in this workshop. For the complete list of pgRouting "
"functions see the API documentation: http://docs.pgrouting.org/"
msgstr "新しい pgRouting 2.0 リリースで他にも多くの関数が利用可能になりましたが、その多くは同じような方法で動作し、またこのワークショップでその全てに言及するにはとても時間が足りません。 pgRouting の関数の完全なリストは API ドキュメントを参照してください: http://docs.pgrouting.org/"
